#!/sbin/sh

export UPD_API="$1"
export UPD_FD="/proc/self/fd/$2"
export UPD_ZIP="$3"
export TMP=/tmp
export SCRIPT=$0

# Ensure the environment is sane... too often it is not
export PATH=/bin:/sbin:$TMP/busybox
busybox mkdir -p $TMP/busybox &>/dev/null && \
	busybox --install -s $TMP/busybox

export UPD_DIR=`dirname "$UPD_ZIP"`

# Check if we have some fstab
test -e /etc/fstab || ( test -e /etc/recovery.fstab && ln /etc/recovery.fstab /etc/fstab )
# Now we can just do "mount /cache", "mount /vendor", "mount /system" etc

atexit() {
	SCRIPT=$0

	test -d "$TMP/busybox" || return 0

	ui_print "Copying recovery.log to source media"
	cp $TMP/recovery.log $UPD_DIR
	sync

	# Unmount partitions left mounted by user script, if any
	for x in /vendor /system /odm /cache /data ; do
		grep -q " $x " /proc/mounts && umount $x
	done

	rm -rf $TMP/busybox

	return 0
}

aterr() {
	set +e
	ui_print "Failed at $2:$1"
	atexit
	exit 1
}

# Display error string on failure
trap "aterr \$LINENO \$SCRIPT" ERR
# At exit, copy recovery.log to sticard
trap "atexit" EXIT

getprop() {
	(cat /vendor/*.prop /system/*.prop /*.prop 2>/dev/null || true) | \
		sed -ne "/^$1 *=/{" -e 's/^.*= *//' -e p -e q -e '}'
}

export TWRP=`getprop ro.twrp.version`

echo "\
UPD_API: $UPD_API
UPD_FD:  $UPD_FD
UPD_ZIP: $UPD_ZIP
TMP:     $TMP
TWRP:    $TWRP"

set -o pipefail

ui_print() {
	# And, of course, to recovery console
	test -n "$UPD_FD" && echo "ui_print $*" >$UPD_FD
	if test -z "$TWRP" ; then
		# Duplicate to stdout, so that it gets into recovery.log
		echo "$*"
	else
		# TWRP will log ui_print's in recovery log, we just have to add \n
		echo ""
	fi
	# Also to UART console
	echo "$*" > /dev/console
}

progress() {
	if [ $# != 2 ]; then
		ui_print "'progress' expects 2 args, got $#"
		ui_print "usage: progress <fraction> <duration>"
		exit 1
	fi

	echo "progress $1 $2" >$UPD_FD
}

show_progress() {
	progress $@
}

set_progress() {
	if [ $# != 1 ]; then
		ui_print "'set_progress' expects 1 args, got $#"
		ui_print "usage: set_progress <fraction>"
		exit 1
	fi

	echo "set_progress $1" >$UPD_FD
}

package_extract_file() {
	if [ $# != 2 ]; then
		ui_print "'package_extract_file' expects 2 args, got $#"
		ui_print "usage: package_extract_file <src-file> <dst-dir|dst-file>"
		exit 1
	fi

	DEST="$2"
	test -d "$DEST" && DEST="$2/`basename $1`"
	rm -f "$DEST"
	if ! unzip -p $UPD_ZIP "$1" > $DEST ; then
		rm -f "$DEST"
		ui_print "Failed to unzip file \"$1\""
		exit 1
	fi
	# busybox' unzip will quietly return success if $1 does not exist
	if ! test -s "$DEST" ; then
		rm -f "$DEST"
		ui_print "No file \"$1\" in archive"
		exit 1
	fi
}

package_extract_folder() {
	if [ $# != 2 ]; then
		ui_print "'package_extract_folder' expects 2 args, got $#";
		ui_print "usage: package_extract_folder <src-dir> <dst-dir>"
		exit 1
	fi

	mkdir -p "$2"
	if ! unzip -o $UPD_ZIP "$1/*" -d "$2" ; then
		ui_print "Failed to unzip folder \"$1\""
		exit 1
	fi
}

set_perm() {
	if [ $# -lt 4 ]; then
		ui_print "'set_perm' expects at least 4 args, got $#"
		ui_print "usage: set_perm <uid> <gid> <mode> [<secontext>] <pathtofile>[, ... pathtofileN]"
		exit 1
	fi

	FUID=`id -u $1 2>/dev/null || echo $1`
	FGID=`id -g $2 2>/dev/null || echo $2`
	MODE=$3
	shift 3

	SECON=
	if echo "$1" | grep -q "^u:" ; then
		SECON=$1
		shift
	fi

	chown $FUID:$FGID $*
	chmod $MODE $*
	# fsck, chcon from busybox always returns exit code 1
	test -z "$SECON" || chcon $SECON $* || true
}

perm() {
	while read FILE FUID FGID MODE SECON ; do
		chown $FUID:$FGID "$FILE"
		chmod $MODE "$FILE"
		chcon $SECON "$FILE" || true
	done < "$1"
	return 0
}

stdout_to_ui_print() {
	while read -r line; do
		ui_print "$line"
	done
}

wipe_cache() {
	echo "wipe_cache" >$UPD_FD
}

clear_display() {
	echo "clear_display" >$UPD_FD
}

enable_reboot() {
	echo "enable_reboot" >$UPD_FD
}

sed_patch() {
	FILE="$1"
	OPTS=
	shift
	while test -n "$1" ; do
		OPTS="$OPTS -e '$1'"
		shift
	done
	eval sed $OPTS "$FILE" > $TMP/tmp.sed
	if cmp -s $TMP/tmp.sed "$FILE" ; then
		rm -f $TMP/tmp.sed
	else
		cat $TMP/tmp.sed >"$FILE"
	fi
	return 0
}

mnt() {
	if ! test -b /dev/block/$1 ; then
		ui_print "Cannot mount /$1, no device /dev/block/$1"
		exit 1
	fi

	if ! grep -q "^/$1 " /proc/mounts; then
		ui_print "Mounting /dev/block/$1 ..."
		mount /dev/block/$1 /$1
	fi
}

# Add empty line between recovery messages & updater-script's
ui_print

# Test for sane arguments
if test -z "$UPD_API" -o -z "$UPD_FD" -o -z "$UPD_ZIP" -o -z "$UPD_DIR" ; then
	ui_print "Wrong script arguments, aborting"
	exit 1
fi

if test "$UPD_ZIP" == "/tmp/update.zip"; then
	ui_print "Can not run in sideload mode"
	exit 1
fi

mkdir -p $TMP

SCRIPT=$TMP/updater-script
if ! package_extract_file META-INF/com/google/android/updater-script $SCRIPT ; then
	ui_print "Can not extract updater-script. Do you have it in package?"
	exit 1
fi

. $SCRIPT $@
